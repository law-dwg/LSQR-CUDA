Welcome to law-dwg's lsqr cuda and cpp implementations!
You can use ctrl+c to kill this program at any time.

Before we begin, please type in your name: Hello , Would you like to build the test matrices from scratch? (y/n): 
Great, lets get started

What sparsity should matrix A have? Please enter a number between 0.0-1.0: Building A Matrices of sparsity 0
Data written to input/50_50_A.txt
Data written to input/50_1_b.txt
Data written to input/150_150_A.txt
Data written to input/150_1_b.txt
Data written to input/250_250_A.txt
Data written to input/250_1_b.txt
Data written to input/350_350_A.txt
Data written to input/350_1_b.txt
Data written to input/450_450_A.txt
Data written to input/450_1_b.txt
Data written to input/550_550_A.txt
Data written to input/550_1_b.txt
Data written to input/650_650_A.txt
Data written to input/650_1_b.txt
Data written to input/750_750_A.txt
Data written to input/750_1_b.txt
Data written to input/850_850_A.txt
Data written to input/850_1_b.txt
Data written to input/950_950_A.txt
Data written to input/950_1_b.txt
Data written to input/1050_1050_A.txt
Data written to input/1050_1_b.txt
Device NVIDIA GeForce 940M has compute capability 5.0.
Number of multiprocessors: 3
Clock rate: 1176000 Hz
Total amount of global memory: 2052608 KB
Total amount of constant memory: 64 KB
Total amount of shared memory per block: 48 KB
Total amount of shared memory per SM: 64 KB
Warp size: 32
Maximum number of threads per block: 1024
Maximum number of blocks per multiprocessor: 2
Maximum number of threads per multiprocessor: 2048
Maximum number of warps per multiprocessor: 64
Maximum Grid size: (2147483647,65535,65535)
Maximum block dimension: (1024,1024,64)
Loading matrix A(1050,1050)... done
Loading matrix b(1050,1)... done
Running lsqr-CPU implementation
Ax=b where A(1050,1050) and b(1050,1)
2. For i=1,2,3....
itn = 525
itn = 1050
itn = 1575
ran through 2100 iterations 
CPU time used = 51013.9 ms for lsqr
Data written to output/1050_1_x_CPU.txt
---------------------------------------------
Running lsqr-GPU implementation
Ax=b where A(1050,1050) and b(1050,1)
Vector_GPU Copy assignment operator was called
2. For i=1,2,3....
